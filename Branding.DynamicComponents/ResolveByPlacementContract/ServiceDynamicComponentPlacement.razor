@using System.Dynamic
@using Branding.DynamicComponents
@using Branding.DynamicComponents.ResolveByPlacementContract

@inject DynamicComponentPlacementFactory CompositionComponentPlacementFactory

@if (_serviceDynamicComponentContract != null)
{
<DynamicComponent Type="@_serviceDynamicComponentContract.DynamicComponentType"
                  Parameters="@_serviceDynamicComponentContract.Parameters" />
}

@code {
    [Parameter, EditorRequired]
    public ServiceComponentPlacementContract Contract { get; set; } = null!;
    [Parameter]
    public Guid? Key { get; set; }
    [CascadingParameter(Name = "CompositionModel")]
    public ExpandoObject CompositionModel { get; set; } = null!;

    private ServiceDynamicComponentContract? _serviceDynamicComponentContract;

    protected override Task OnInitializedAsync()
    {
        if (CompositionModel == null)
        {
            throw new ArgumentNullException(nameof(CompositionModel), "A cascading parameter with name CompositionModel must be provided to use this component.");
        }

        _serviceDynamicComponentContract = CompositionComponentPlacementFactory.GetDynamicComponentInfo(Contract, Key);

        return Task.CompletedTask;
    }
}
