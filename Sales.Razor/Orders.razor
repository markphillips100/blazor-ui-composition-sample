@using ITOps.Utilities
@using Sales.API.Model
@using System.Dynamic
@using Sales.Razor
@using System.Net.Http

@inject HttpClient Http

@if (_compositionModel == null)
{
    <p><em>Loading...</em></p>
}
else
{
    if (ListTemplate != null)
    {
        <CascadingValue Value="@_compositionModel" Name="CompositionModel">
        @ListTemplate(_keys)
        </CascadingValue>
    }
}

@code {
    [Parameter]
    public RenderFragment<Guid[]>? ListTemplate { get; set; }

    private ExpandoObject _compositionModel;
    private Guid[] _keys;

    protected override async Task OnInitializedAsync()
    {
        var httpResponse = await Http.GetAsync($"api/orders");
        dynamic compositionModel = await httpResponse.Content.AsExpandoAsync(JsonSerializerSettingsDefaults.GetJsonSerializerSettings());

        var ordersModel = ((ExpandoObject)compositionModel.sales).As<OrdersIndexViewModel>(JsonSerializerSettingsDefaults.GetJsonSerializerSettings());
        _compositionModel = (ExpandoObject)compositionModel;
        _keys = ordersModel.OrdersMap.Keys.ToArray();
    }
}
